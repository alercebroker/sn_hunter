{"remainingRequest":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tronco/Desktop/alerce/sne_hunter_vue/src/components/Celestial.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/src/components/Celestial.vue","mtime":1563132780671},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"celestial\",\n  mounted: function(){\n    var config = {\n      datapath: \"/vendor/d3-celestial/data\",\n      planets:  { show: false },\n      stars: {show: false},\n      dsos: {show:false, limit:30},\n      constellations: {show:false},\n      transform: \"equatorial\",\n      background:{\n        fill: \"#8778d2\",\n        opacity:1\n      },\n      mw:{\n        show:true,\n        style:{\n          fill: \"#ffffff\",\n          opacity: 0.3\n        }\n      },\n      lines:{\n        graticule: { show: true, stroke: \"#cccccc\", width: 0.6, opacity: 0.8,      // Show graticule lines\n        // grid values: \"outline\", \"center\", or [lat,...] specific position\n        lon: {pos: [\"center\"], fill: \"#eee\", font: \"10px Helvetica, Arial, sans-serif\"},\n        // grid values: \"outline\", \"center\", or [lon,...] specific position\n        lat: {pos: [\"center\"], fill: \"#eee\", font: \"10px Helvetica, Arial, sans-serif\"}},\n      }\n\n    }\n    Celestial.display(config);\n\n\n    this.$store.subscribe((mutations,state) => {\n      switch (mutations.type) {\n        case \"SET_CANDIDATES\":\n\n        Celestial.clear();\n        var jsonSN = {\n                \"type\":\"FeatureCollection\",\n                // this is an array, add as many objects as you want\n                \"features\": this.points\n                };\n\n        var pointStyle = {\n                stroke: \"#534B8C\",\n                width: 3,\n                fill: \"rgba(255, 204, 255, 0.8)\"\n              };\n          var textStyle = {\n                font: \"bold 15px Helvetica, Arial, sans-serif\",\n                align: \"left\",\n                baseline: \"bottom\"\n              };\n\n              Celestial.add({type:\"raw\",\n                            callback: function(error, json) {\n                              if (error) return console.warn(error);\n                              // Load the geoJSON file and transform to correct coordinate system, if necessary\n                              var dsn = Celestial.getData(jsonSN, config.transform);\n\n                              // Add to celestial objects container in d3\n                              Celestial.container.selectAll(\".sn\")\n                                .data(dsn.features)\n                                .enter().append(\"path\")\n                                .attr(\"class\", \"sn\");\n                              // Trigger redraw to display changes\n                              Celestial.redraw();\n                            },\n                            redraw: function() {\n                                // Select the added objects by class name as given previously\n                                Celestial.container.selectAll(\".sn\").each(function(d) {\n                                  // If point is visible (this doesn't work automatically for points)\n                                  if (Celestial.clip(d.geometry.coordinates)) {\n                                    // get point coordinates\n                                    var pt = Celestial.mapProjection(d.geometry.coordinates);\n                                    // object radius in pixel, could be varable depending on e.g. dimension or magnitude\n                                    var r = 7*Math.pow(d.properties.prob,32); // replace 20 with dimmest magnitude in the data\n\n                                    // draw on canvas\n                                    //  Set object styles fill color, line color & width etc.\n                                    Celestial.setStyle(pointStyle);\n                                    // Start the drawing path\n                                    Celestial.context.beginPath();\n                                    // Thats a circle in html5 canvas\n                                    Celestial.context.arc(pt[0], pt[1], r, 0, 2 * Math.PI);\n                                    // Finish the drawing path\n                                    Celestial.context.closePath();\n                                    // Draw a line along the path with the prevoiusly set stroke color and line width\n                                    Celestial.context.stroke();\n                                    // Fill the object path with the prevoiusly set fill color\n                                    Celestial.context.fill();\n\n                                    // Set text styles\n                                    // Celestial.setTextStyle(textStyle);\n                                    // and draw text on canvas\n                                    // Celestial.context.fillText(d.properties.name, pt[0] + r - 1, pt[1] - r + 1);\n                                  }\n                                });\n                              }\n                            });\n\n                            Celestial.display(config);\n          break;\n\n          case \"SELECT_CANDIDATE\":\n            this.zoomSN();\n\n          break;\n      }\n    });\n\n  },\n  computed:{\n    points: function(){\n      var rawCandidates = this.$store.getters.getCandidates;\n      var points = []\n\n      $.each(rawCandidates,function(key,value){\n        var oid = key, prob=value[\"pclassearly\"], ra=value[\"meanra\"], dec=value[\"meandec\"];\n\n        points.push({\n           \"type\":\"Feature\",\n           \"id\":oid,\n           \"properties\": {\n             // Name\n             \"name\":oid,\n             \"type\":\"sn\",\n             // magnitude, dimension in arcseconds or any other size criterion\n             //\"mag\": 10,\n             //\"dim\": 30\n             \"prob\": prob\n           }, \"geometry\":{\n             // the location of the object as a [ra, dec] array in degrees [-180..180, -90..90]\n             \"type\":\"Point\",\n             \"coordinates\": [ra,dec]\n           }\n         });\n\n      });\n\n      return points;\n    }\n\n\n  },\n  methods:{\n    zoomSN: function(){\n      var data = this.$store.getters.getSelected;\n      var ra = data[\"meanra\"],\n        dec = data[\"meandec\"],\n        oid = data[\"oid\"]\n      var pt = [ra,dec,0];\n\n      var anim = [];\n      var zoomed = this.$store.getters.getZoomed;\n      if(zoomed){\n        anim.push({\"param\":\"zoom\", \"value\":-.3, \"duration\":2});\n      }else{\n        this.$store.dispatch(\"setZoomed\");\n      }\n      anim.push({\"param\":\"center\", \"value\":pt, \"duration\":250});\n      anim.push({\"param\":\"zoom\", \"value\":1.3, \"duration\":2});\n\n      Celestial.animate(anim, false);\n    },\n\n    introTour(){\n      alert(\"Turisteando\");\n    }\n\n  }\n\n\n}\n\n",{"version":3,"sources":["Celestial.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"Celestial.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"celestialDiv\">\n    <div class=\"auto-adjust\" id=\"celestial-map\"></div>\n    <p class=\"text-md-center\">Smaller circles means lower probability</p>\n    <!-- <div class=\"text-md-center\">\n      <v-btn @click=\"introTour()\">\n        <v-icon class=\"icon\">help</v-icon> Quick Start\n      </v-btn> -->\n    </div>\n  </div>\n\n</template>\n\n\n<script>\n  export default {\n    name: \"celestial\",\n    mounted: function(){\n      var config = {\n        datapath: \"/vendor/d3-celestial/data\",\n        planets:  { show: false },\n        stars: {show: false},\n        dsos: {show:false, limit:30},\n        constellations: {show:false},\n        transform: \"equatorial\",\n        background:{\n          fill: \"#8778d2\",\n          opacity:1\n        },\n        mw:{\n          show:true,\n          style:{\n            fill: \"#ffffff\",\n            opacity: 0.3\n          }\n        },\n        lines:{\n          graticule: { show: true, stroke: \"#cccccc\", width: 0.6, opacity: 0.8,      // Show graticule lines\n          // grid values: \"outline\", \"center\", or [lat,...] specific position\n          lon: {pos: [\"center\"], fill: \"#eee\", font: \"10px Helvetica, Arial, sans-serif\"},\n          // grid values: \"outline\", \"center\", or [lon,...] specific position\n          lat: {pos: [\"center\"], fill: \"#eee\", font: \"10px Helvetica, Arial, sans-serif\"}},\n        }\n\n      }\n      Celestial.display(config);\n\n\n      this.$store.subscribe((mutations,state) => {\n        switch (mutations.type) {\n          case \"SET_CANDIDATES\":\n\n          Celestial.clear();\n          var jsonSN = {\n                  \"type\":\"FeatureCollection\",\n                  // this is an array, add as many objects as you want\n                  \"features\": this.points\n                  };\n\n          var pointStyle = {\n                  stroke: \"#534B8C\",\n                  width: 3,\n                  fill: \"rgba(255, 204, 255, 0.8)\"\n                };\n            var textStyle = {\n                  font: \"bold 15px Helvetica, Arial, sans-serif\",\n                  align: \"left\",\n                  baseline: \"bottom\"\n                };\n\n                Celestial.add({type:\"raw\",\n                              callback: function(error, json) {\n                                if (error) return console.warn(error);\n                                // Load the geoJSON file and transform to correct coordinate system, if necessary\n                                var dsn = Celestial.getData(jsonSN, config.transform);\n\n                                // Add to celestial objects container in d3\n                                Celestial.container.selectAll(\".sn\")\n                                  .data(dsn.features)\n                                  .enter().append(\"path\")\n                                  .attr(\"class\", \"sn\");\n                                // Trigger redraw to display changes\n                                Celestial.redraw();\n                              },\n                              redraw: function() {\n                                  // Select the added objects by class name as given previously\n                                  Celestial.container.selectAll(\".sn\").each(function(d) {\n                                    // If point is visible (this doesn't work automatically for points)\n                                    if (Celestial.clip(d.geometry.coordinates)) {\n                                      // get point coordinates\n                                      var pt = Celestial.mapProjection(d.geometry.coordinates);\n                                      // object radius in pixel, could be varable depending on e.g. dimension or magnitude\n                                      var r = 7*Math.pow(d.properties.prob,32); // replace 20 with dimmest magnitude in the data\n\n                                      // draw on canvas\n                                      //  Set object styles fill color, line color & width etc.\n                                      Celestial.setStyle(pointStyle);\n                                      // Start the drawing path\n                                      Celestial.context.beginPath();\n                                      // Thats a circle in html5 canvas\n                                      Celestial.context.arc(pt[0], pt[1], r, 0, 2 * Math.PI);\n                                      // Finish the drawing path\n                                      Celestial.context.closePath();\n                                      // Draw a line along the path with the prevoiusly set stroke color and line width\n                                      Celestial.context.stroke();\n                                      // Fill the object path with the prevoiusly set fill color\n                                      Celestial.context.fill();\n\n                                      // Set text styles\n                                      // Celestial.setTextStyle(textStyle);\n                                      // and draw text on canvas\n                                      // Celestial.context.fillText(d.properties.name, pt[0] + r - 1, pt[1] - r + 1);\n                                    }\n                                  });\n                                }\n                              });\n\n                              Celestial.display(config);\n            break;\n\n            case \"SELECT_CANDIDATE\":\n              this.zoomSN();\n\n            break;\n        }\n      });\n\n    },\n    computed:{\n      points: function(){\n        var rawCandidates = this.$store.getters.getCandidates;\n        var points = []\n\n        $.each(rawCandidates,function(key,value){\n          var oid = key, prob=value[\"pclassearly\"], ra=value[\"meanra\"], dec=value[\"meandec\"];\n\n          points.push({\n             \"type\":\"Feature\",\n             \"id\":oid,\n             \"properties\": {\n               // Name\n               \"name\":oid,\n               \"type\":\"sn\",\n               // magnitude, dimension in arcseconds or any other size criterion\n               //\"mag\": 10,\n               //\"dim\": 30\n               \"prob\": prob\n             }, \"geometry\":{\n               // the location of the object as a [ra, dec] array in degrees [-180..180, -90..90]\n               \"type\":\"Point\",\n               \"coordinates\": [ra,dec]\n             }\n           });\n\n        });\n\n        return points;\n      }\n\n\n    },\n    methods:{\n      zoomSN: function(){\n        var data = this.$store.getters.getSelected;\n        var ra = data[\"meanra\"],\n          dec = data[\"meandec\"],\n          oid = data[\"oid\"]\n        var pt = [ra,dec,0];\n\n        var anim = [];\n        var zoomed = this.$store.getters.getZoomed;\n        if(zoomed){\n          anim.push({\"param\":\"zoom\", \"value\":-.3, \"duration\":2});\n        }else{\n          this.$store.dispatch(\"setZoomed\");\n        }\n        anim.push({\"param\":\"center\", \"value\":pt, \"duration\":250});\n        anim.push({\"param\":\"zoom\", \"value\":1.3, \"duration\":2});\n\n        Celestial.animate(anim, false);\n      },\n\n      introTour(){\n        alert(\"Turisteando\");\n      }\n\n    }\n\n\n  }\n\n</script>\n\n<style>\n  .auto-adjust{\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n</style>\n"]}]}