{"remainingRequest":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/babel-loader/lib/index.js!/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/vuetify-loader/lib/loader.js!/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tronco/Desktop/alerce/sne_hunter_vue/src/components/Celestial.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/src/components/Celestial.vue","mtime":1563132780671},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tronco/Desktop/alerce/sne_hunter_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"celestial\",\n  mounted: function mounted() {\n    var _this = this;\n\n    var config = {\n      datapath: \"/vendor/d3-celestial/data\",\n      planets: {\n        show: false\n      },\n      stars: {\n        show: false\n      },\n      dsos: {\n        show: false,\n        limit: 30\n      },\n      constellations: {\n        show: false\n      },\n      transform: \"equatorial\",\n      background: {\n        fill: \"#8778d2\",\n        opacity: 1\n      },\n      mw: {\n        show: true,\n        style: {\n          fill: \"#ffffff\",\n          opacity: 0.3\n        }\n      },\n      lines: {\n        graticule: {\n          show: true,\n          stroke: \"#cccccc\",\n          width: 0.6,\n          opacity: 0.8,\n          // Show graticule lines\n          // grid values: \"outline\", \"center\", or [lat,...] specific position\n          lon: {\n            pos: [\"center\"],\n            fill: \"#eee\",\n            font: \"10px Helvetica, Arial, sans-serif\"\n          },\n          // grid values: \"outline\", \"center\", or [lon,...] specific position\n          lat: {\n            pos: [\"center\"],\n            fill: \"#eee\",\n            font: \"10px Helvetica, Arial, sans-serif\"\n          }\n        }\n      }\n    };\n    Celestial.display(config);\n    this.$store.subscribe(function (mutations, state) {\n      switch (mutations.type) {\n        case \"SET_CANDIDATES\":\n          Celestial.clear();\n          var jsonSN = {\n            \"type\": \"FeatureCollection\",\n            // this is an array, add as many objects as you want\n            \"features\": _this.points\n          };\n          var pointStyle = {\n            stroke: \"#534B8C\",\n            width: 3,\n            fill: \"rgba(255, 204, 255, 0.8)\"\n          };\n          var textStyle = {\n            font: \"bold 15px Helvetica, Arial, sans-serif\",\n            align: \"left\",\n            baseline: \"bottom\"\n          };\n          Celestial.add({\n            type: \"raw\",\n            callback: function callback(error, json) {\n              if (error) return console.warn(error); // Load the geoJSON file and transform to correct coordinate system, if necessary\n\n              var dsn = Celestial.getData(jsonSN, config.transform); // Add to celestial objects container in d3\n\n              Celestial.container.selectAll(\".sn\").data(dsn.features).enter().append(\"path\").attr(\"class\", \"sn\"); // Trigger redraw to display changes\n\n              Celestial.redraw();\n            },\n            redraw: function redraw() {\n              // Select the added objects by class name as given previously\n              Celestial.container.selectAll(\".sn\").each(function (d) {\n                // If point is visible (this doesn't work automatically for points)\n                if (Celestial.clip(d.geometry.coordinates)) {\n                  // get point coordinates\n                  var pt = Celestial.mapProjection(d.geometry.coordinates); // object radius in pixel, could be varable depending on e.g. dimension or magnitude\n\n                  var r = 7 * Math.pow(d.properties.prob, 32); // replace 20 with dimmest magnitude in the data\n                  // draw on canvas\n                  //  Set object styles fill color, line color & width etc.\n\n                  Celestial.setStyle(pointStyle); // Start the drawing path\n\n                  Celestial.context.beginPath(); // Thats a circle in html5 canvas\n\n                  Celestial.context.arc(pt[0], pt[1], r, 0, 2 * Math.PI); // Finish the drawing path\n\n                  Celestial.context.closePath(); // Draw a line along the path with the prevoiusly set stroke color and line width\n\n                  Celestial.context.stroke(); // Fill the object path with the prevoiusly set fill color\n\n                  Celestial.context.fill(); // Set text styles\n                  // Celestial.setTextStyle(textStyle);\n                  // and draw text on canvas\n                  // Celestial.context.fillText(d.properties.name, pt[0] + r - 1, pt[1] - r + 1);\n                }\n              });\n            }\n          });\n          Celestial.display(config);\n          break;\n\n        case \"SELECT_CANDIDATE\":\n          _this.zoomSN();\n\n          break;\n      }\n    });\n  },\n  computed: {\n    points: function points() {\n      var rawCandidates = this.$store.getters.getCandidates;\n      var points = [];\n      $.each(rawCandidates, function (key, value) {\n        var oid = key,\n            prob = value[\"pclassearly\"],\n            ra = value[\"meanra\"],\n            dec = value[\"meandec\"];\n        points.push({\n          \"type\": \"Feature\",\n          \"id\": oid,\n          \"properties\": {\n            // Name\n            \"name\": oid,\n            \"type\": \"sn\",\n            // magnitude, dimension in arcseconds or any other size criterion\n            //\"mag\": 10,\n            //\"dim\": 30\n            \"prob\": prob\n          },\n          \"geometry\": {\n            // the location of the object as a [ra, dec] array in degrees [-180..180, -90..90]\n            \"type\": \"Point\",\n            \"coordinates\": [ra, dec]\n          }\n        });\n      });\n      return points;\n    }\n  },\n  methods: {\n    zoomSN: function zoomSN() {\n      var data = this.$store.getters.getSelected;\n      var ra = data[\"meanra\"],\n          dec = data[\"meandec\"],\n          oid = data[\"oid\"];\n      var pt = [ra, dec, 0];\n      var anim = [];\n      var zoomed = this.$store.getters.getZoomed;\n\n      if (zoomed) {\n        anim.push({\n          \"param\": \"zoom\",\n          \"value\": -.3,\n          \"duration\": 2\n        });\n      } else {\n        this.$store.dispatch(\"setZoomed\");\n      }\n\n      anim.push({\n        \"param\": \"center\",\n        \"value\": pt,\n        \"duration\": 250\n      });\n      anim.push({\n        \"param\": \"zoom\",\n        \"value\": 1.3,\n        \"duration\": 2\n      });\n      Celestial.animate(anim, false);\n    },\n    introTour: function introTour() {\n      alert(\"Turisteando\");\n    }\n  }\n};",{"version":3,"sources":["Celestial.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"celestialDiv\">\n    <div class=\"auto-adjust\" id=\"celestial-map\"></div>\n    <p class=\"text-md-center\">Smaller circles means lower probability</p>\n    <!-- <div class=\"text-md-center\">\n      <v-btn @click=\"introTour()\">\n        <v-icon class=\"icon\">help</v-icon> Quick Start\n      </v-btn> -->\n    </div>\n  </div>\n\n</template>\n\n\n<script>\n  export default {\n    name: \"celestial\",\n    mounted: function(){\n      var config = {\n        datapath: \"/vendor/d3-celestial/data\",\n        planets:  { show: false },\n        stars: {show: false},\n        dsos: {show:false, limit:30},\n        constellations: {show:false},\n        transform: \"equatorial\",\n        background:{\n          fill: \"#8778d2\",\n          opacity:1\n        },\n        mw:{\n          show:true,\n          style:{\n            fill: \"#ffffff\",\n            opacity: 0.3\n          }\n        },\n        lines:{\n          graticule: { show: true, stroke: \"#cccccc\", width: 0.6, opacity: 0.8,      // Show graticule lines\n          // grid values: \"outline\", \"center\", or [lat,...] specific position\n          lon: {pos: [\"center\"], fill: \"#eee\", font: \"10px Helvetica, Arial, sans-serif\"},\n          // grid values: \"outline\", \"center\", or [lon,...] specific position\n          lat: {pos: [\"center\"], fill: \"#eee\", font: \"10px Helvetica, Arial, sans-serif\"}},\n        }\n\n      }\n      Celestial.display(config);\n\n\n      this.$store.subscribe((mutations,state) => {\n        switch (mutations.type) {\n          case \"SET_CANDIDATES\":\n\n          Celestial.clear();\n          var jsonSN = {\n                  \"type\":\"FeatureCollection\",\n                  // this is an array, add as many objects as you want\n                  \"features\": this.points\n                  };\n\n          var pointStyle = {\n                  stroke: \"#534B8C\",\n                  width: 3,\n                  fill: \"rgba(255, 204, 255, 0.8)\"\n                };\n            var textStyle = {\n                  font: \"bold 15px Helvetica, Arial, sans-serif\",\n                  align: \"left\",\n                  baseline: \"bottom\"\n                };\n\n                Celestial.add({type:\"raw\",\n                              callback: function(error, json) {\n                                if (error) return console.warn(error);\n                                // Load the geoJSON file and transform to correct coordinate system, if necessary\n                                var dsn = Celestial.getData(jsonSN, config.transform);\n\n                                // Add to celestial objects container in d3\n                                Celestial.container.selectAll(\".sn\")\n                                  .data(dsn.features)\n                                  .enter().append(\"path\")\n                                  .attr(\"class\", \"sn\");\n                                // Trigger redraw to display changes\n                                Celestial.redraw();\n                              },\n                              redraw: function() {\n                                  // Select the added objects by class name as given previously\n                                  Celestial.container.selectAll(\".sn\").each(function(d) {\n                                    // If point is visible (this doesn't work automatically for points)\n                                    if (Celestial.clip(d.geometry.coordinates)) {\n                                      // get point coordinates\n                                      var pt = Celestial.mapProjection(d.geometry.coordinates);\n                                      // object radius in pixel, could be varable depending on e.g. dimension or magnitude\n                                      var r = 7*Math.pow(d.properties.prob,32); // replace 20 with dimmest magnitude in the data\n\n                                      // draw on canvas\n                                      //  Set object styles fill color, line color & width etc.\n                                      Celestial.setStyle(pointStyle);\n                                      // Start the drawing path\n                                      Celestial.context.beginPath();\n                                      // Thats a circle in html5 canvas\n                                      Celestial.context.arc(pt[0], pt[1], r, 0, 2 * Math.PI);\n                                      // Finish the drawing path\n                                      Celestial.context.closePath();\n                                      // Draw a line along the path with the prevoiusly set stroke color and line width\n                                      Celestial.context.stroke();\n                                      // Fill the object path with the prevoiusly set fill color\n                                      Celestial.context.fill();\n\n                                      // Set text styles\n                                      // Celestial.setTextStyle(textStyle);\n                                      // and draw text on canvas\n                                      // Celestial.context.fillText(d.properties.name, pt[0] + r - 1, pt[1] - r + 1);\n                                    }\n                                  });\n                                }\n                              });\n\n                              Celestial.display(config);\n            break;\n\n            case \"SELECT_CANDIDATE\":\n              this.zoomSN();\n\n            break;\n        }\n      });\n\n    },\n    computed:{\n      points: function(){\n        var rawCandidates = this.$store.getters.getCandidates;\n        var points = []\n\n        $.each(rawCandidates,function(key,value){\n          var oid = key, prob=value[\"pclassearly\"], ra=value[\"meanra\"], dec=value[\"meandec\"];\n\n          points.push({\n             \"type\":\"Feature\",\n             \"id\":oid,\n             \"properties\": {\n               // Name\n               \"name\":oid,\n               \"type\":\"sn\",\n               // magnitude, dimension in arcseconds or any other size criterion\n               //\"mag\": 10,\n               //\"dim\": 30\n               \"prob\": prob\n             }, \"geometry\":{\n               // the location of the object as a [ra, dec] array in degrees [-180..180, -90..90]\n               \"type\":\"Point\",\n               \"coordinates\": [ra,dec]\n             }\n           });\n\n        });\n\n        return points;\n      }\n\n\n    },\n    methods:{\n      zoomSN: function(){\n        var data = this.$store.getters.getSelected;\n        var ra = data[\"meanra\"],\n          dec = data[\"meandec\"],\n          oid = data[\"oid\"]\n        var pt = [ra,dec,0];\n\n        var anim = [];\n        var zoomed = this.$store.getters.getZoomed;\n        if(zoomed){\n          anim.push({\"param\":\"zoom\", \"value\":-.3, \"duration\":2});\n        }else{\n          this.$store.dispatch(\"setZoomed\");\n        }\n        anim.push({\"param\":\"center\", \"value\":pt, \"duration\":250});\n        anim.push({\"param\":\"zoom\", \"value\":1.3, \"duration\":2});\n\n        Celestial.animate(anim, false);\n      },\n\n      introTour(){\n        alert(\"Turisteando\");\n      }\n\n    }\n\n\n  }\n\n</script>\n\n<style>\n  .auto-adjust{\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}